{
  "service": {
    "service": "prueba",
    "serviceObject": {
      "name": "prueba"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "timeout": 900,
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "SyncCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/prueba-dev-syncCategories"
            }
          },
          "ListCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/prueba-dev-listCategories"
            }
          },
          "SaveEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/prueba-dev-saveEvents"
            }
          },
          "SyncEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/prueba-dev-syncEvents"
            }
          },
          "ListAllEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/prueba-dev-listAllEvents"
            }
          },
          "ListEventByDateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/prueba-dev-listEventByDate"
            }
          },
          "CronsSyncEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/prueba-dev-cronsSyncEvents"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "prueba",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/prueba-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/prueba-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "prueba",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "SyncCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/prueba/dev/1708984227436-2024-02-26T21:50:27.436Z/prueba.zip"
              },
              "Handler": "handler.syncCategoriesHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "prueba-dev-syncCategories",
              "MemorySize": 1024,
              "Timeout": 900,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SyncCategoriesLogGroup"
            ]
          },
          "ListCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/prueba/dev/1708984227436-2024-02-26T21:50:27.436Z/prueba.zip"
              },
              "Handler": "handler.listCategoriesHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "prueba-dev-listCategories",
              "MemorySize": 1024,
              "Timeout": 900,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListCategoriesLogGroup"
            ]
          },
          "SaveEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/prueba/dev/1708984227436-2024-02-26T21:50:27.436Z/prueba.zip"
              },
              "Handler": "handler.saveEventsHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "prueba-dev-saveEvents",
              "MemorySize": 1024,
              "Timeout": 900,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveEventsLogGroup"
            ]
          },
          "SyncEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/prueba/dev/1708984227436-2024-02-26T21:50:27.436Z/prueba.zip"
              },
              "Handler": "handler.syncEventsHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "prueba-dev-syncEvents",
              "MemorySize": 1024,
              "Timeout": 900,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SyncEventsLogGroup"
            ]
          },
          "ListAllEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/prueba/dev/1708984227436-2024-02-26T21:50:27.436Z/prueba.zip"
              },
              "Handler": "handler.listAllEventsHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "prueba-dev-listAllEvents",
              "MemorySize": 1024,
              "Timeout": 900,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListAllEventsLogGroup"
            ]
          },
          "ListEventByDateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/prueba/dev/1708984227436-2024-02-26T21:50:27.436Z/prueba.zip"
              },
              "Handler": "handler.listEventByDateHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "prueba-dev-listEventByDate",
              "MemorySize": 1024,
              "Timeout": 900,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListEventByDateLogGroup"
            ]
          },
          "CronsSyncEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/prueba/dev/1708984227436-2024-02-26T21:50:27.436Z/prueba.zip"
              },
              "Handler": "handler.syncEventsHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "prueba-dev-cronsSyncEvents",
              "MemorySize": 1024,
              "Timeout": 900,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CronsSyncEventsLogGroup"
            ]
          },
          "SyncCategoriesLambdaVersionKLsb7Lxw6a3N86IUcngtjcbi6kKZfha0QTcGHCg6UV4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SyncCategoriesLambdaFunction"
              },
              "CodeSha256": "wakgGfG46/RlGT+AcI6oISX4uiTNCygZ6TfBFazibzQ="
            }
          },
          "ListCategoriesLambdaVersiondpq5XDRL3NTKf0RHq2rwFUGUSaUgbYIUDXPWGnwB68": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListCategoriesLambdaFunction"
              },
              "CodeSha256": "wakgGfG46/RlGT+AcI6oISX4uiTNCygZ6TfBFazibzQ="
            }
          },
          "SaveEventsLambdaVersioneXYfaBn8EkluHFaxRetaMtPPIEnrm7L5V2nmTakpVc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveEventsLambdaFunction"
              },
              "CodeSha256": "wakgGfG46/RlGT+AcI6oISX4uiTNCygZ6TfBFazibzQ="
            }
          },
          "SyncEventsLambdaVersionllCqBHk1xh8aJFgWtyUpDDpvKrAmGE4l6eGtTRmegS8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SyncEventsLambdaFunction"
              },
              "CodeSha256": "wakgGfG46/RlGT+AcI6oISX4uiTNCygZ6TfBFazibzQ="
            }
          },
          "ListAllEventsLambdaVersionnlY0ePc0oj7PNQsnEDiyuTdgVXg8yMVHzaVoG1c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListAllEventsLambdaFunction"
              },
              "CodeSha256": "wakgGfG46/RlGT+AcI6oISX4uiTNCygZ6TfBFazibzQ="
            }
          },
          "ListEventByDateLambdaVersionnra6x7Z5W18JzpeqFWvWbBBCaCzN0Sv9ZhsylNG6KIA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListEventByDateLambdaFunction"
              },
              "CodeSha256": "wakgGfG46/RlGT+AcI6oISX4uiTNCygZ6TfBFazibzQ="
            }
          },
          "CronsSyncEventsLambdaVersionLu1EmmOsyiJwDM5BtFif4CJn4ODlLwF4W8qPzjDcEjo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CronsSyncEventsLambdaFunction"
              },
              "CodeSha256": "wakgGfG46/RlGT+AcI6oISX4uiTNCygZ6TfBFazibzQ="
            }
          },
          "CronsSyncEventsEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 15 * * ? *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "CronsSyncEventsLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "cronsSyncEventsSchedule"
                }
              ]
            }
          },
          "CronsSyncEventsLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CronsSyncEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CronsSyncEventsEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "CronsSyncEventsEventsRuleSchedule2": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 3 * * ? *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "CronsSyncEventsLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "cronsSyncEventsSchedule"
                }
              ]
            }
          },
          "CronsSyncEventsLambdaPermissionEventsRuleSchedule2": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CronsSyncEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CronsSyncEventsEventsRuleSchedule2",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-prueba",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceSyncDashcategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "sync-categories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceListDashcategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "list-categories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSaveDashevents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "save-events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSyncDashevents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "sync-events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEvents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventsList": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "PathPart": "list",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventsListAll": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEventsList"
              },
              "PathPart": "all",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSyncDashcategoriesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSyncDashcategories"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SyncCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SyncCategoriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodListDashcategoriesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceListDashcategories"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListCategoriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSaveDasheventsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSaveDashevents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SaveEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SaveEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSyncDasheventsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSyncDashevents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SyncEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SyncEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsListAllGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsListAll"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListAllEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListAllEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsListGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsList"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListEventByDateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListEventByDateLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSyncDasheventsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSyncDashevents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CronsSyncEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CronsSyncEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1708984224522": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodSyncDashcategoriesGet",
              "ApiGatewayMethodListDashcategoriesGet",
              "ApiGatewayMethodSaveDasheventsPost",
              "ApiGatewayMethodSyncDasheventsPost",
              "ApiGatewayMethodEventsListAllGet",
              "ApiGatewayMethodEventsListGet",
              "ApiGatewayMethodSyncDasheventsGet"
            ]
          },
          "SyncCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SyncCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SaveEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SyncEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SyncEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListAllEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListAllEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListEventByDateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListEventByDateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CronsSyncEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CronsSyncEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-prueba-dev-ServerlessDeploymentBucketName"
            }
          },
          "SyncCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SyncCategoriesLambdaVersionKLsb7Lxw6a3N86IUcngtjcbi6kKZfha0QTcGHCg6UV4"
            },
            "Export": {
              "Name": "sls-prueba-dev-SyncCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "ListCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListCategoriesLambdaVersiondpq5XDRL3NTKf0RHq2rwFUGUSaUgbYIUDXPWGnwB68"
            },
            "Export": {
              "Name": "sls-prueba-dev-ListCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "SaveEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveEventsLambdaVersioneXYfaBn8EkluHFaxRetaMtPPIEnrm7L5V2nmTakpVc"
            },
            "Export": {
              "Name": "sls-prueba-dev-SaveEventsLambdaFunctionQualifiedArn"
            }
          },
          "SyncEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SyncEventsLambdaVersionllCqBHk1xh8aJFgWtyUpDDpvKrAmGE4l6eGtTRmegS8"
            },
            "Export": {
              "Name": "sls-prueba-dev-SyncEventsLambdaFunctionQualifiedArn"
            }
          },
          "ListAllEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListAllEventsLambdaVersionnlY0ePc0oj7PNQsnEDiyuTdgVXg8yMVHzaVoG1c"
            },
            "Export": {
              "Name": "sls-prueba-dev-ListAllEventsLambdaFunctionQualifiedArn"
            }
          },
          "ListEventByDateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListEventByDateLambdaVersionnra6x7Z5W18JzpeqFWvWbBBCaCzN0Sv9ZhsylNG6KIA"
            },
            "Export": {
              "Name": "sls-prueba-dev-ListEventByDateLambdaFunctionQualifiedArn"
            }
          },
          "CronsSyncEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CronsSyncEventsLambdaVersionLu1EmmOsyiJwDM5BtFif4CJn4ODlLwF4W8qPzjDcEjo"
            },
            "Export": {
              "Name": "sls-prueba-dev-CronsSyncEventsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-prueba-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-offline",
      "serverless-plugin-monorepo"
    ],
    "pluginsData": {},
    "functions": {
      "syncCategories": {
        "handler": "handler.syncCategoriesHandler",
        "events": [
          {
            "http": {
              "path": "sync-categories",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "prueba-dev-syncCategories",
        "package": {},
        "memory": 1024,
        "timeout": 900,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SyncCategoriesLambdaVersionKLsb7Lxw6a3N86IUcngtjcbi6kKZfha0QTcGHCg6UV4"
      },
      "listCategories": {
        "handler": "handler.listCategoriesHandler",
        "events": [
          {
            "http": {
              "path": "list-categories",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "prueba-dev-listCategories",
        "package": {},
        "memory": 1024,
        "timeout": 900,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ListCategoriesLambdaVersiondpq5XDRL3NTKf0RHq2rwFUGUSaUgbYIUDXPWGnwB68"
      },
      "saveEvents": {
        "handler": "handler.saveEventsHandler",
        "events": [
          {
            "http": {
              "path": "save-events",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "prueba-dev-saveEvents",
        "package": {},
        "memory": 1024,
        "timeout": 900,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SaveEventsLambdaVersioneXYfaBn8EkluHFaxRetaMtPPIEnrm7L5V2nmTakpVc"
      },
      "syncEvents": {
        "handler": "handler.syncEventsHandler",
        "events": [
          {
            "http": {
              "path": "sync-events",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "prueba-dev-syncEvents",
        "package": {},
        "memory": 1024,
        "timeout": 900,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SyncEventsLambdaVersionllCqBHk1xh8aJFgWtyUpDDpvKrAmGE4l6eGtTRmegS8"
      },
      "listAllEvents": {
        "handler": "handler.listAllEventsHandler",
        "events": [
          {
            "http": {
              "path": "events/list/all",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "prueba-dev-listAllEvents",
        "package": {},
        "memory": 1024,
        "timeout": 900,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ListAllEventsLambdaVersionnlY0ePc0oj7PNQsnEDiyuTdgVXg8yMVHzaVoG1c"
      },
      "listEventByDate": {
        "handler": "handler.listEventByDateHandler",
        "events": [
          {
            "http": {
              "path": "events/list",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "prueba-dev-listEventByDate",
        "package": {},
        "memory": 1024,
        "timeout": 900,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ListEventByDateLambdaVersionnra6x7Z5W18JzpeqFWvWbBBCaCzN0Sv9ZhsylNG6KIA"
      },
      "cronsSyncEvents": {
        "handler": "handler.syncEventsHandler",
        "events": [
          {
            "schedule": "cron(0 15 * * ? *)"
          },
          {
            "schedule": "cron(0 3 * * ? *)"
          },
          {
            "http": {
              "path": "sync-events",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "prueba-dev-cronsSyncEvents",
        "package": {},
        "memory": 1024,
        "timeout": 900,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CronsSyncEventsLambdaVersionLu1EmmOsyiJwDM5BtFif4CJn4ODlLwF4W8qPzjDcEjo"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "prueba",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\ernes\\WebstormProjects\\nasa-api\\packages\\services\\.serverless\\prueba.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/prueba/dev/1708984227436-2024-02-26T21:50:27.436Z",
    "artifact": "prueba.zip"
  }
}